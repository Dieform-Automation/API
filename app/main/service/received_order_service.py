import datetime

from app.main import db
from app.main.model.received_order import ReceivedOrder

from ..util.validate import validate

def save_new_received_order(data):
    response = validate(data)
    if response: 
        return response # not validated

    receivable = ReceivedOrder.query.filter_by(customer_packing_slip=data['customer_packing_slip'], customer_id=int(data['customer_id'])).first()

    if not receivable:
        receivable = ReceivedOrder(
            customer_id=int(data['customer_id']),
            customer_packing_slip=data['customer_packing_slip'],
        )

        if 'date' in data.keys(): # since date is optional
            receivable.date = datetime.datetime.date(data['date'])

        save_changes(receivable)
        db.session.refresh(receivable)
        data['id'] = receivable.id # get id of newly created data
        data['date'] = receivable.date # get date of newly created data (when date is generated by db)
        response_object = {
            'status': 'Success',
            'message': 'Successfully added new received order.',
            'data': data
        }
        return response_object, 201
    else:
        response_object = {
            'status': 'Fail',
            'message': 'Received order with that part for that customer already exists.',
        }
        return response_object, 409

def update_receiving_order(id, data):
    response = validate(data)
    if response: 
        return response # not validated

    receivable = ReceivedOrder.query.filter_by(id=id).first()
    if receivable and 'customer_packing_slip' in data.keys():
        receivable.customer_packing_slip = data['customer_packing_slip']

        db.session.commit()
        response_object = {
            'status': 'success',
            'message': 'Successfully updated receiving order.',
            'data': data
        }
        return response_object, 204
    else:
        response_object = {
            'status': 'Not Found',
            'message': 'Received order could not be updated.',
        }
        return response_object, 404

def get_all_received_orders():
    return ReceivedOrder.query.all()

def get_all_received_order_by_customerID(id):
    return ReceivedOrder.query.filter_by(customer_id=id).all()

def get_a_receiving_order(id):
    return ReceivedOrder.query.filter_by(id=id).first()

def save_changes(data):
    db.session.add(data)
    db.session.commit()